var util = require('util');
var EventEmitter = require('events').EventEmitter;
var VK = require('vk');
var MongoClient = require('mongodb').MongoClient;

var login_timeout_time = 1000; // одна секунда

var application;

var Spammer = function (){
  EventEmitter.call(this);

  this.queue_authorization = 0;
}

util.inherits(Spammer, EventEmitter);

var _Class = Spammer;

_Class.prototype.addEventListeners = function () {

  this.on('synchronized_data_with_database', this.onSynchronizedDataWithDb)
}

_Class.prototype.removeEventListeners = function () {

}

_Class.prototype.start = function() {
  var self = this;

  application = window.application;

  application.primaryLog('Приложение запущено!');

  this.addEventListeners(); // при старте добавляем обработчики событий

  this.connectToDb(function(db){
    self.db = db;

    application.secondaryLog('Подключение к базе данных прошло успешно!');

    self.logOutAndLogin(null, function(response){
      application.primaryLog('Пользователь ' + response.user_id + 'авторизовался успешно.');
      // как только прошла первая авторизация, синхронизируем данные с базой
      //self.synchronizeDataWithDb();
    });

  });
}

_Class.prototype.stop = function() {
  this.removeEventListeners();
}

_Class.prototype.connectToDb = function(callback){
  application.primaryLog('Подключаемся к базе данных');

  MongoClient.connect('mongodb://127.0.0.1:27017/spammerdb', function(err, db) {
    if(err) throw err;

    callback(db);
  });
}

_Class.prototype.logOutAndLogin = function(onLogOutCallback, onLoginCallback){
  var self = this;

  self.vkLogout(function(response){
    setTimeout(function(){
      self.vkLogin(onLoginCallback);
    }, login_timeout_time);
  });
}

_Class.prototype.synchronizeDataWithDb = function(){
  var self = this;

  var getMembers = function(offset){

    if(!offset) offset = 0;

    application.primaryLog('Получение участников группы <strong>' + global.main_group + '</strong>');

    var options = {
      gid: global.main_group,
      access_token: currentUser.access_token,
      count: 1000,
      sort: 'time_desc'
    }

    if(offset > 0){
      _.extend(options, {offset: offset});
    }

    VK.request('groups.getMembers',
      options,
      function(error, response){
        if(error){
          application.secondaryLog('Произошла ошибка получения данных группы <strong>' + group_id + '</strong>');

          application.secondaryLog(error.error_msg);
          application.secondaryLog(util.inspect(error));

        } else {
          application.secondaryLog('Получение ' + (offset + response.users.length) + ' из ' + response.count + ' участников группы <strong>' + group_id + '</strong> прошло успешно');

          _.extend(response, {offset: offset + response.users.length});

          addMembersToDb(response);
        }
      }
    );
  }

  var addMembersToDb = function(response) {
    var db_users = self.db.collection('users');

    application.secondaryLog('Синхронизация полученных данных с базой данной...');

    self.filterByDb(response.users, function(user_ids){
      db_users.insert(
      _.map(user_ids, function(id){ return {_id: id} }),
        function(err, objects){
          if (err) application.secondaryLog(err.message);

          application.secondaryLog('Синхронизация данных с базой данной завершена');

          if(response.count > response.offset){
            setTimeout(function(){
              getMembers(response.offset);
            }, 1000);

          } else {
            application.primaryLog('Все участники группы обработаны.');

            //emitter.emmit('synchronized_data_with_database');
          }
        }
      );
    });
  }

  getMembers();
}

_Class.prototype.onSynchronizedDataWithDb = function(){
  // application.secondaryLog('Синхронизация с базой данных завершена.');

  // application.secondaryLog('Предварительный выход из аккаунта.');

  // VK.logOut(function(message){
  //   currentUser = {}; // сброс пользователя

  //   application.secondaryLog(message);

  //   setTimeout(function(){
  //     self.vkLogin();
  //   }, 2000); // выдерживаем интервал после выхода

  // });
}


_Class.prototype.vkLogin = function (callback){
  var auth_data_item = global.authorization_data[this.queue_authorization];
  var login = auth_data_item[1];
  var pass  = auth_data_item[2];

  if(!auth_data_item) {
    application.secondaryLog('Пользователи все обработаны');

    this.db.close();

    return
  }

  this.queue_authorization += 1 // сдвигаем на следующего пользователя для авторизации

  application.primaryLog('Идет авторизация пользователя <strong>' + auth_data_item[0] + '</strong>');

  VK.authorize(login, pass, function(error, response){
    if(error) throw error.message;

    _.exntend(global.current_user, response); // обновляем данные пользователя

    callback(response);
  });
}

_Class.prototype.vkLogout = function (callback){
  VK.logOut(function(error, response){
    if(error) throw error;

    callback();
  });
}

_Class.prototype.filterByDb = function(user_ids, callback){
  window.console.log(user_ids.length);
  var db_users = this.db.collection('users');
  var db_user_ids;
  var filtered_user_ids = [];

  db_users.find({_id: {$in: user_ids}}).toArray(function(err, objects){
    window.console.log('Проверка пользователей в базе');
    window.console.log(objects);

    db_user_ids = _.map(objects, function(o){ return o._id });

    user_ids.forEach(function(id){
      if(!_.contains(db_user_ids, id)){
        filtered_user_ids.push(id);
      }
    });

    window.console.log(filtered_user_ids.length);

    callback(filtered_user_ids);
  });
}

// _Class.prototype.vkLoginResponse = function(error, response) {
//   var self = this;

//   if(error) {
//     application.primaryLog('Пользователь не авторизовался!');
//     application.secondaryLog(util.inspect(error));

//     this.vkLogin();

//   } else if(response) {
//     currentUser = response;

//     application.primaryLog('Пользователь <strong>' + currentUser.user_id + '</strong> авторизовался успешно!');
//     this.renderSidebar();

//     setTimeout(function(){
//       self.getProfile();
//     }, 1000); //Выдерживаем

//   } else {
//     application.primaryLog('Пользователь не авторизовался!');
//     application.secondaryLog('Метод авторизации не вернул никаких данных для пользователя <strong>' + auth_user[0] + '</strong>');
//     application.secondaryLog('Начинаем авторизацию следующего пользователя');

//     this.vkLogin();
//   }
// }


// _Class.prototype.getProfile = function(){
//   var self = this;

//   VK.request('getProfiles',
//     {
//       access_token: currentUser.access_token,
//       fields: 'counters, screen_name'
//     },
//     function(error, response){
//       if(error){
//         application.secondaryLog('Произошла ошибка получения данных профиля пользователя <strong>' + currentUser.user_id + '</strong>');

//         application.secondaryLog(error.error_msg);
//         application.secondaryLog(util.inspect(error));

//       } else {
//         window.console.log(response[0]);
//         _.extend(currentUser, response[0]);

//         application.secondaryLog('Данные получены успешно');
//         //application.secondaryLog(util.inspect(currentUser));
//         application.secondaryLog('Количество друзей - <strong>' + currentUser.counters.friends + '</strong>');

//         setTimeout(function(){
//           self.getFrendIds();
//         }, 2000);
//       }
//     }
//   );
// }

// _Class.prototype.getFrendIds = function(){
//   var self = this;

//   application.secondaryLog('Делаем запрос на получение ids друзей пользователя <strong>' + currentUser.user_id + '</strong>');

//   VK.request('friends.get',
//     {
//       access_token: currentUser.access_token
//     },
//     function(error, response){
//       if(error){
//         application.secondaryLog('Произошла ошибка получения ids друзей пользователя <strong>' + currentUser.user_id + '</strong>');

//         application.secondaryLog(error.error_msg);
//         application.secondaryLog(util.inspect(error));

//       } else {
//         application.secondaryLog('Получение ids друзей пользователя <strong>' + currentUser.user_id + '</strong> прошло успешно.');

//         _.extend(currentUser, {friend_ids: response});

//         self.updateUsersDataInDb();
//       }
//     }
//   );
// }

// _Class.prototype.updateUsersDataInDb = function(){
//   var self = this;

//   application.secondaryLog('Синхронизация полученных данных с базой данной...');

//   var users = this.db.collection('users');

//   this.filterByDb(currentUser.friend_ids, function(friend_ids){
//     users.insert(
//     _.map(friend_ids, function(id){ return {_id: id} }),
//       function(err, objects){
//         if (err) application.secondaryLog(err.message);

//         application.secondaryLog('Синхронизация данных с базой данной завершена');

//         self.startSpammWork();
//       }
//     );
//   });

// }

// _Class.prototype.startSpammWork = function() {
//   var self = this;
//   var members = [];
//   var offset = 0;

//   var group_id = global.groups[global.group_number];

//   if(global.groups.length > global.group_number + 1){
//     global.group_number += 1 // сдвигаем на следующего пользователя
//   } else {
//     global.group_number = 0; // передвагаем на начала списка
//   }

//   application.primaryLog('Получение данных группы <strong>' + group_id + '</strong>');

//   this.getMembersOfGroup(group_id, 0);
// }

// _Class.prototype.getMembersOfGroup = function(group_id, offset){
//   var self = this;

//   application.primaryLog('Получение участников группы <strong>' + group_id + '</strong>');

//   var options = {
//     gid: group_id,
//     access_token: currentUser.access_token,
//     count: 100,
//     sort: 'time_desc'
//   }

//   if(offset > 0){
//     _.extend(options, {offset: offset});
//   }

//   VK.request('groups.getMembers',
//     options,
//     function(error, response){
//       if(error){
//         application.secondaryLog('Произошла ошибка получения данных группы <strong>' + group_id + '</strong>');

//         application.secondaryLog(error.error_msg);
//         application.secondaryLog(util.inspect(error));

//       } else {
//         application.secondaryLog('Получение участников группы <strong>' + group_id + '</strong> прошло успешно');

//         setTimeout(function(){
//           self.emit('response_members_of_group',
//           _.extend(response, {
//               offset: offset + response.users.length,
//               group_id: group_id
//             })
//           );
//         }, 2000);
//       }
//     }
//   );
// }

// _Class.prototype.onResponseMembersOfGroup = function(members_group_response) {
//   var self = this;

//   window.console.log(members_group_response.offset);

//   this.filterByDb(members_group_response.users, function(users){
//     VK.request('users.get',
//       {
//         uids: users.join(','),
//         access_token: currentUser.access_token,
//         fields: 'online'
//       },
//       function(error, response){
//         if(error){
//           application.secondaryLog('Произошла ошибка получения расширенной информации участников группы <strong>' + members_group_response.group_id + '</strong>');

//           application.secondaryLog(error.error_msg);
//           application.secondaryLog(util.inspect(error));

//         } else {
//           application.secondaryLog('Получение расширенной информации участников группы <strong>' + members_group_response.group_id + '</strong> прошло успешно');

//           self.addToFriends(response, 0);
//         }
//       }
//     );
//   });

//   var getGroupMembersAgain = function(){
//     if(members_group_response.count > members_group_response.offset){
//       setTimeout(function(){
//         self.getMembersOfGroup(members_group_response.group_id, members_group_response.offset);
//       }, 2000);
//     } else {
//       application.primaryLog('Все участники группы обработаны.');

//       // VK.logOut(function(message){
//       //   currentUser = {}; // сброс пользователя

//       //   application.secondaryLog(message);

//       //   setTimeout(function(){
//       //     self.vkLogin();
//       //   }, 2000); // выдерживаем интервал после выхода

//       // });
//     }
//   }

//   self.removeListener('get_group_members_again', getGroupMembersAgain);

//   self.once('get_group_members_again', getGroupMembersAgain);
// }

// _Class.prototype.addToFriendAfterCaptcha = function(user_id, text, captcha_sid, users, count){
//   var self = this;

//   VK.request('friends.add',
//     {
//       uid: user_id,
//       captcha_sid: captcha_sid,
//       captcha_key: text,
//       access_token: currentUser.access_token
//     },
//     function(error, response){
//       if(error){
//         //application.secondaryLog('Произошла ошибка получения расширенной информации участников группы <strong>' + members_group_response.group_id + '</strong>');

//         window.console.log(error.error_code);

//         if(error.error_code == 1 || error.error_code == 0){
//           // превышен лими добавления в друзья вызодим из пользователя

//           application.secondaryLog('Превышен лимит на добавления в друзья!');

//           VK.logOut(function(message){
//             currentUser = {}; // сброс пользователя

//             application.secondaryLog(message);

//             setTimeout(function(){
//               self.vkLogin();
//             }, 2000); // выдерживаем интервал после выхода

//           });

//         } else if(error.error_code == 14){
//           application.secondaryLog('Cнова пришла капча на добавление пользователя <strong>' + user_id + '</strong> в друзья');

//           setTimeout(function(){
//             if(users.length > count + 1){
//               self.addToFriends(users, count);
//             } else {
//               self.emit('get_group_members_again');
//             }

//           }, 5000);

//         } else {
//           application.secondaryLog(error.error_msg);
//           application.secondaryLog(util.inspect(error));
//         }

//       } else {
//         //application.secondaryLog('Получение расширенной информации участников группы <strong>' + members_group_response.group_id + '</strong> прошло успешно');

//         window.console.log(response);

//         global.success_added += 1;

//         self.renderSidebar();
//         var db_users = self.db.collection('users');

//         db_users.insert({_id: user_id}, function(err, objects){
//           if (err) application.secondaryLog(err.message);

//           application.secondaryLog('Добавлен новый пользователь в базу данных.');
//         });

//         setTimeout(function(){
//           if(users.length > count + 1){
//             self.addToFriends(users, count);
//           } else {
//             self.emit('get_group_members_again');
//           }

//         }, 5000);
//       }
//     }
//   );
// }

// _Class.prototype.addToFriends = function(users, count){
//   var self = this;
//   var user;
//   var db_users = this.db.collection('users');


//   do {
//     user = users[count];
//     count += 1;

//   } while(user && user.online == 0)

//   if(user && user.online == 1){
//     application.secondaryLog('Идет добавление пользователя <strong>' + user.uid + '</strong> в друзья');

//     VK.request('friends.add',
//       {
//         uid: user.uid,
//         access_token: currentUser.access_token
//       },
//       function(error, response){
//         if(error){
//           //application.secondaryLog('Произошла ошибка получения расширенной информации участников группы <strong>' + members_group_response.group_id + '</strong>');

//           window.console.log(error.error_code);

//           if(error.error_code == 1 || error.error_code == 0){
//             // превышен лими добавления в друзья вызодим из пользователя

//             application.secondaryLog('Превышен лимит на добавления в друзья!');

//             VK.logOut(function(message){
//               currentUser = {}; // сброс пользователя

//               application.secondaryLog(message);

//               setTimeout(function(){
//                 self.vkLogin();
//               }, 2000); // выдерживаем интервал после выхода

//             });

//           } else if(error.error_code == 14){
//             application.secondaryLog('Пришла капча на добавление пользователя <strong>' + user.uid + '</strong> в друзья');
//            // application.secondaryLog("<img src='" + error.captcha_img+ "' />");

//             if(currentUser.captcha){
//               currentUser.captcha += 1;
//             } else {
//               currentUser.captcha = 1;
//             }

//             self.renderSidebar();

//             // setTimeout(function(){
//             //   if(users.length > count + 1){
//             //     self.addToFriends(users, count);
//             //   } else {
//             //     emitter.emit('get_group_members_again');
//             //   }

//             // }, 10000);

//             self.renderModal(error.captcha_img, error.captcha_sid, function(text){

//               self.addToFriendAfterCaptcha(user.uid, text, error.captcha_sid, users, count)
//             });

//             // var delay = currentUser.captcha < 10 ? 5000 : currentUser.captcha * 1000;

//             // if(currentUser.captcha < 10){
//             //   setTimeout(function(){
//             //     if(users.length > count + 1){
//             //       self.addToFriends(users, count);
//             //     } else {
//             //       emitter.emit('get_group_members_again');
//             //     }

//             //   }, delay);

//             // } else {

//             //   application.secondaryLog('Достигнут лимит капчи. Делем выход.');

//             //   VK.logOut(function(message){
//             //     currentUser = {}; // сброс пользователя

//             //     application.secondaryLog(message);

//             //     setTimeout(function(){
//             //       self.vkLogin();
//             //     }, 2000); // выдерживаем интервал после выхода

//             //   });
//             // }


//           } else {
//             application.secondaryLog(error.error_msg);
//             application.secondaryLog(util.inspect(error));
//           }

//         } else {
//           //application.secondaryLog('Получение расширенной информации участников группы <strong>' + members_group_response.group_id + '</strong> прошло успешно');

//           window.console.log(response);

//           global.success_added += 1;

//           self.renderSidebar();

//           db_users.insert({_id: user.uid}, function(err, objects){
//             if (err) application.secondaryLog(err.message);

//             application.secondaryLog('Добавлен новый пользователь в базу данных.');
//           });

//           setTimeout(function(){
//             if(users.length > count + 1){
//               self.addToFriends(users, count);
//             } else {
//               self.emit('get_group_members_again');
//             }

//           }, 5000);
//         }
//       }
//     );
//   } else {
//     self.emit('get_group_members_again');
//   }
// }


module.exports = _Class;
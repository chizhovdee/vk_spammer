/**
*  VK api with node webkit ui
*
*/



var app_id = 4275483;

var scope = 'friends,groups,messages';

var gui = global.window.nwDispatcher.requireNwGui();
var url = require('url');
var util = require('util');
var request = require('request');

module.exports.authorize = function (login, pass, callback) {
  var currentWin = gui.Window.get(); // get current window
  var newWin;
  var timeout;

  var error;

  var authResult;
  var authUrl = "https://oauth.vk.com/authorize"
  authUrl += "?client_id=" + app_id
  authUrl += "&scope=" + scope ;
  authUrl += "&display=popup";
  authUrl += "&redirect_uri=http://oauth.vk.com/blank.html&response_type=token";


  var runAuthorize = function(){
    var windowOptions = {
      // position: 'center',
      // width: 500,
      // height: 400,
      show: false
    }

    newWin = gui.Window.open(authUrl, windowOptions); // open and get new window to authorization on Vk.com

    // callbacks
    var onWinLoaded = function(){
      var parsedHash;
      var parsedUlr = url.parse(this.window.location.href, true);

      currentWin.window.console.log(parsedUlr);
      console.log(parsedUlr);

      if(/#access_token=*/.test(parsedUlr.hash)){
        parsedHash = parsedUlr.hash.slice(1, parsedUlr.hash.length).split('&');
        authResult = _.object(_.map(parsedHash, function(s){ return s.split('=')}));

        returnResult(error, authResult);

      } else if(parsedUlr.query.email && parsedUlr.query.m == 4) {
        error = {
          type: 'auth_failure',
          message: 'Не правильный логин или пароль для ' + login
        };

        returnResult(error, authResult);

      } else if(parsedUlr.query.act == 'blocked') {
        error = {
          type: 'auth_failure',
          message: 'Пользователь заблокирован ' + login
        };

        returnResult(error, authResult);

      } else if(parsedUlr.query.__q_hash) { // запрос на права

        newWin.window.document.getElementById("install_allow").click();

      } else if(newWin.window.document.getElementById("login_submit")) {

        try{
          newWin.window.document.getElementsByName("email")[0].value = login;
          newWin.window.document.getElementsByName("pass")[0].value = pass;
          newWin.window.document.getElementById("login_submit").submit.click();

        } catch (e) {
          error = {
            type: 'unkown',
            message: e
          }

          newWin.close();
        }

      }
    }

    timeout = setTimeout(function(){
      currentWin.window.application.secondaryLog("Не получается авторизоваться. Возможны проблемы с соединением. Пробуем еще раз.");

      newWin.close();

      runAuthorize();
    }, 10000);

    currentWin.window.console.log(timeout);

    newWin.on('loaded', onWinLoaded);

    newWin.once('closed', function(){
      newWin.removeListener('loaded', onWinLoaded);

      clearTimeout(timeout);
    });
  }


  var returnResult = function(error, response){
    newWin.close();

    callback(error, response);
  }

  runAuthorize();
}


module.exports.logOut = function(callback){
  var currentWin = gui.Window.get(); // get current window
  var newWin;
  var timeout;

  var runLogout = function(){
    var hashed = 0;
    var error;
    var parsedUlr;

    var windowOptions = {
      // position: 'center',
      show: false
    }

    newWin = gui.Window.open('http://vk.com', windowOptions); // open and get new window to authorization on Vk.com

    var onWinLoaded = function (){
      parsedUlr = url.parse(this.window.location.href, true);

      if(parsedUlr.query.hash) {
        hashed += 1;

      } else {
        var logout_link = newWin.window.document.getElementById('logout_link');

        if(logout_link) {
          logout_link.click();

        } else {
          returnResult(error, parsedUlr.query.hash);
        }
      }

      if(hashed == 2){
        returnResult(error, parsedUlr.query.hash);
      }
    }

    timeout = setTimeout(function(){
      currentWin.window.application.secondaryLog("Не получается выйти из аккаунта. Возможны проблемы с соединением. Пробуем еще раз.");

      newWin.close();

      runLogout();
    }, 10000);

    newWin.on('loaded', onWinLoaded);

    newWin.once('closed', function(){
      newWin.removeListener('loaded', onWinLoaded);

      clearTimeout(timeout);
    });
  }

  var returnResult = function(error, response){
    newWin.close();

    callback(error, response);
  }

  runLogout();
}


/**
*  Метод для запросов к api vkontakte
*/

module.exports.request = function (method, params, callback){
  var resending_delay = 10000; // первую отправку даем 10 секунд

  var send = function(){
    request(
      {
        url: 'https://api.vk.com/method/' + method,
        qs: params
      },
      function (error, response, body) {
        if(error) {
          if(error.code == "ENOTFOUND"){
            window.application.secondaryLog("<strong>Нет соединения!!!</strong>");
            window.application.secondaryLog("Повторный запрос будет сделан через " + resending_delay / 1000 + " секунд...");

            setTimeout(function(){
              send();
            }, resending_delay);

            if(resending_delay < 60000) resending_delay += 5000; // прибавляем по 5 секунд на каждую попытку

          } else {
            throw error;
          }

        } else {
          try{
            body = JSON.parse(body);

          } catch (e) {
            window.console.log(error);
            window.console.log(response);
            window.console.log(body);
            window.console.log(e);

            throw 'Не могу распарсить ответ запроса. Смотри лог. ' + util.inspect(e);
          }

          callback(body.error, body.response);
        }
      }
    );
  }

  send();
}